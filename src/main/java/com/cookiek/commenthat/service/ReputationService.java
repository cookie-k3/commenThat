package com.cookiek.commenthat.service;

import com.cookiek.commenthat.dto.UserRankingDto;
import com.cookiek.commenthat.repository.SentiStatRepository;
import com.cookiek.commenthat.repository.UploadRepository;
import com.cookiek.commenthat.repository.ViewGrowthRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;
import java.math.RoundingMode;

@Slf4j
@Service
@RequiredArgsConstructor
public class ReputationService {

    private final ViewGrowthRepository viewGrowthRepository;
    private final UploadRepository uploadRepository;
    private final SentiStatRepository sentiStatRepository;

    // ÏßÄÎÇúÎã¨ Í∏∞Ï§ÄÏúºÎ°ú ÏãúÏûëÏùº, Ï¢ÖÎ£åÏùº Í≥ÑÏÇ∞
    private final LocalDateTime prevMonthStart = LocalDate.now().minusMonths(1).withDayOfMonth(1).atStartOfDay();

    private final LocalDateTime prevMonthEnd = LocalDate.now().minusMonths(1)
            .withDayOfMonth(LocalDate.now().minusMonths(1).lengthOfMonth())
            .atTime(23, 59, 59, 999_999_000); // 999ms + 999,000ns

//    private final LocalDateTime start = LocalDate.now().withDayOfMonth(1).atStartOfDay();
//    private final LocalDateTime end = LocalDate.now()
//            .withDayOfMonth(LocalDate.now().lengthOfMonth())
//            .atTime(23, 59, 59, 999_999_000); // 999ms + 999,000ns


    public List<UserRankingDto> getTopUsersByViews() {
        log.info("[Ï°∞ÌöåÏàò ÌÇπÏôïÏß±] ÏµúÍ∑º 3Ïùº Í∏∞Ï§Ä Ï¶ùÍ∞ÄÏú® Îû≠ÌÇπ Í≥ÑÏÇ∞ ÏãúÏûë");

        return viewGrowthRepository.findTopUsersByViewGrowthRateLast3Days().stream()
                .map(row -> new UserRankingDto(
                        ((Number) row[0]).longValue(),
                        (String) row[1],
                        (String) row[2],
                        (String) row[3],
                        ((BigDecimal) row[4])
                                .multiply(BigDecimal.valueOf(100))
                                .setScale(2, RoundingMode.HALF_UP)
                )).collect(Collectors.toList());
    }

    public List<UserRankingDto> getTopUsersByUploadCount() {
        log.info("[ÏÑ±Ïã§ ÌÇπÏôïÏß±] ÏßÄÎÇúÎã¨ Í∏∞Ï§Ä Îû≠ÌÇπ Í≥ÑÏÇ∞ ÏãúÏûë");

        List<Object[]> rawResult = uploadRepository.findTopUsersByUploadCountNative(prevMonthStart, prevMonthEnd);

        for (Object[] row : rawResult) {
            Long userId = ((Number) row[0]).longValue();
            String loginId = (String) row[1];
            String channelName = (String) row[3];
            Number count = (Number) row[4];

            log.info("üîç Upload Count ‚Üí userId: {}, loginId: {}, channelName: {}, count: {}", userId, loginId, channelName, count);

            if (userId == 6L) {
                List<com.cookiek.commenthat.domain.Video> videos = uploadRepository.findVideosByUserIdAndDateRange(userId, prevMonthStart, prevMonthEnd);
                log.info("üìã Ïπ®Ï∞©Îß® ÏòÅÏÉÅ Î™©Î°ù ({})Í∞ú:", videos.size());
                for (com.cookiek.commenthat.domain.Video video : videos) {
                    log.info("üìΩ videoId: {}, uploadDate: {}", video.getId(), video.getDate());
                }
            }
        }

        return rawResult.stream()
                .map(row -> new UserRankingDto(
                        ((Number) row[0]).longValue(),
                        (String) row[1],
                        (String) row[2],
                        (String) row[3],
                        BigDecimal.valueOf(((Number) row[4]).longValue())
                )).collect(Collectors.toList());
    }

    public List<UserRankingDto> getTopUsersByPositiveComments() {
        log.info("[Í∏çÏ†ï ÌÇπÏôïÏß±] ÏßÄÎÇúÎã¨ Í∏∞Ï§Ä Îû≠ÌÇπ Í≥ÑÏÇ∞ ÏãúÏûë");

        // ÏøºÎ¶¨ Í≤∞Í≥º Î∞õÏïÑÏò§Í∏∞
        List<Object[]> result = sentiStatRepository.findTopUsersByPositiveRatio(prevMonthStart, prevMonthEnd);

        // üëâ Î°úÍ∑∏Î°ú ÏøºÎ¶¨ Í≤∞Í≥º Ï∂úÎ†•
        log.info("Ï¥ù Í∏çÏ†ï Îû≠ÌÇπ Ïú†Ï†Ä Ïàò: {}", result.size());
        for (Object[] row : result) {
            Long userId = ((Number) row[0]).longValue();
            String loginId = (String) row[1];
            String channelName = (String) row[3];
            BigDecimal ratio = (BigDecimal) row[4];

            log.info("üëç Í∏çÏ†ï ÎπÑÏú® Ïú†Ï†Ä ‚Üí userId: {}, loginId: {}, Ï±ÑÎÑêÎ™Ö: {}, ÎπÑÏú®: {}",
                    userId, loginId, channelName, ratio);
        }

        // DTO Î≥ÄÌôò
        return result.stream()
                .map(row -> new UserRankingDto(
                        ((Number) row[0]).longValue(),
                        (String) row[1],
                        (String) row[2],
                        (String) row[3],
                        ((BigDecimal) row[4])
                                .multiply(BigDecimal.valueOf(100))
                                .setScale(2, RoundingMode.HALF_UP)
                )).collect(Collectors.toList());
    }


}